#!/usr/bin/python3
#
# accu-json [--bib] [--site-dir <dir>] JSON file <JSON file ....>
#
# Various processing of dumped JSON files.
#
# --bib Print bib data from JSON.

import argparse
import io
import json
import pathlib
import re
import sys
import traceback

import accuwebsite

def read_json(fname, bib_format=False):
    journal_re = re.compile(r'(?P<name>\w+)\s*Journal.*\- (?P<month>.*)\s*(?P<year>\d{4})')
    issue_re = re.compile(r'o?\d+')
    month_abbrev = {
        'Jan': 'January',
        'Feb': 'February',
        'Mar': 'March',
        'Apr': 'April',
        'May': 'May',
        'Jun': 'June',
        'Jul': 'July',
        'Aug': 'August',
        'Sep': 'September',
        'Oct': 'October',
        'Nov': 'November',
        'Dec': 'December'
        }
    id_fixups = {
        # Overload test issue 1
        1805: ('Overload', '2013', 'July'),
        1806: ('Overload', '2013', 'July'),
        1807: ('Overload', '2013', 'July'),
        1808: ('Overload', '2013', 'July'),

        # Overload test issue 2
        1821: ('Overload', '2014', 'January'),
        1822: ('Overload', '2014', 'January'),
        1823: ('Overload', '2014', 'January'),

        # Article in Overload April 2010
        1623: ('Overload', '2010', 'April'),
        }
    with open(fname) as f:
        article = json.load(f)
    res = dict()
    for s in ['id', 'title', 'body']:
        if s in article:
            res[s.capitalize()] = str(article[s]).replace('\r', '')
    if res['Title']:
        res['Title'] = res['Title'].replace('\n', ' ')
    # Some old summaries are HTML. Don't include them, but prepend to the
    # body instead. Formatting can be fixed up manually if necessary.
    if 'summary' in article and article['summary']:
        if article['summary'][0] == '<':
            res['Body'] = article['summary'] + '\n' + article['body']
        else:
            res['Note'] = article['summary']
    if not 'Note' in res:
        res['Note'] = ''
    if 'author' in article:
        name = article['author']
        if name:
            if bib_format:
                # Turn 'Fred Bloggs' into 'Bloggs, Fred'.
                np = name.rpartition(' ')
                res['Author'] = '{}, {}'.format(np[2], np[0])
            else:
                res['Author'] = name
    if not 'Author' in res:
        res['Author'] = ''
    # Although there could be more than one category apart from
    # the article category and the journal ID, in practice there isn't.
    for cid in article['category-id']:
        match = issue_re.search(cid)
        if not match:
            res['CategoryID'] = cid
    for cname in article['category-name']:
        match = journal_re.search(cname)
        if match:
            res['Journal'] = match.group('name')
            res['Year'] = match.group('year')
            # Older articles have 3 letter month abbreviations.
            res['Month'] = month_abbrev[match.group('month')[0:3]]
        else:
            res['CategoryName'] = cname
    if article['id'] in id_fixups:
        fixup = id_fixups[article['id']]
        res['Journal'] = fixup[0]
        res['Year'] = fixup[1]
        res['Month'] = fixup[2]
    return res

def gen_adoc(args):
    for fname in args.input:
        article = read_json(fname)
        if article['Journal'] != args.journal:
            continue
        try:
            outfile = pathlib.Path(args.sitedir) / accuwebsite.article_path(article['Journal'], article['Year'], article['Month'], article['Title'])
            outfile.parent.mkdir(parents=True, exist_ok=True)
            adoc = accuwebsite.convert_article(article['Body'], 'html', 'adoc', article['Title'], article['Author'], article['Note'], str(outfile.parent), args.includebio)
            outfile.write_text(adoc[0])
            if adoc[1]:
                for img in adoc[1]:
                    print(img)
            if 'Id' in article and article['Id']:
                idx = pathlib.Path(args.sitedir) / 'journals' / str(article['Id'])
                idx.parent.mkdir(parents=True, exist_ok=True)
                relpath = pathlib.Path('..') / outfile.relative_to(args.sitedir)
                idx.unlink()
                idx.symlink_to(relpath)
        except accuwebsite.ConversionError as ce:
            print('ConversionError {} in {}'.format(ce, fname), file=sys.stderr)

def print_bib(args):
    # Process in reverse order, to try to get the newest first.
    flist = []
    for fname in args.input:
        flist.insert(0, fname)
    for fname in flist:
        article = read_json(fname, True)
        if article['Journal'] != args.journal:
            continue
        print('@Article{')
        for s in ['Id', 'Title', 'Author', 'Note', 'Journal', 'Month', 'Year', 'CategoryID', 'CategoryName']:
            if s in article:
                val = article[s]
                if isinstance(val, str):
                    val = val.replace('\r\n', '\\n').replace('\n', '\\n')
                print('  {}={}'.format(s, val))
        print('}\n')

def main():
    parser = argparse.ArgumentParser(description='process Xaraya articles dumped to JSON')
    parser.add_argument('-j', '--journal', dest='journal',
                        action='store',
                        choices=['CVu', 'Overload'],
                        required=True,
                        help='\'CVu\' or \'Overload\'', metavar='JOURNAL')
    parser.add_argument('-s', '--site-dir', dest='sitedir',
                        action='store', default='.',
                        help='site base directory', metavar='DIR')
    parser.add_argument('--include-bio', dest='includebio',
                        action='store_true', help='include author bio')
    parser.add_argument('--bib', dest='bib', action='store_true',
                        help='generate bib output')
    parser.add_argument('input', nargs='*',
                        help='input JSON file',
                        metavar='JSON file')
    args = parser.parse_args()

    try:
        if args.bib:
            print_bib(args)
        else:
            gen_adoc(args)
        sys.exit(0)
    except Exception as e:
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()

# Local Variables:
# mode: Python
# End:
