#!/usr/bin/python3
#
# accu-xml-tool [--html] [--adoc] [XML/HTML file]
#
# Convert an input HTML or XML file in ACCU style to AsciiDoc
# (the default) or HTML.

import argparse
import sys

import bs4

class BaseOutput:
    def convert(self, soup, replace_newlines=True):
        """ Convert everything below this tag.

        Return a list of strings.
        """
        if isinstance(soup, bs4.NavigableString):
            # Newlines are not significate in HTML (apart from PRE),
            # but may be in an output format (e.g. they are in AsciiDoc).
            # So replace any with a space unless indicated.
            text = soup.string
            if replace_newlines:
                text = text.replace('\n', ' ')
            return [text];
        elif isinstance(soup, bs4.Tag):
            f = getattr(self, soup.name, self.unknown_tag)
            return f(soup)
        else:
            return self.convert_children(soup, replace_newlines)

    def convert_children(self, soup, replace_newlines=True):
        res = []
        if soup is not None and hasattr(soup, 'children'):
            for c in soup.children:
                res.extend(self.convert(c, replace_newlines))
        return res

    def unknown_tag(self, tag):
        # print('Unknown Tag {}'.format(tag.name))
        return self.convert_children(tag)

class AdocOutput(BaseOutput):
    def __init__(self):
        self.title = None
        self.author = None
        self.bio = None
        self.ul_level = 1
        self.ol_level = 1
        self.list_item = []

    @staticmethod
    def has_class(tag, classname):
        """ See if tag has a class of given name.

        BS behaves returns a list of classes on HTML input, and
        a single class in XML input. Deal with both.
        """
        cl = tag.get('class')
        if not cl:
            return False
        if isinstance(cl, list):
            return classname in cl
        else:
            return classname == cl

    @staticmethod
    def trim(text, spaces=True):
        while text and not text[0].strip():
            del text[0]
        while text and not text[-1].strip():
            del text[-1]
        if text:
            text[0] = text[0].lstrip('\n')
            text[-1] = text[-1].rstrip()
        if spaces and text:
            text[0] = text[0].lstrip()
        return text

    def p(self, tag):
        if self.has_class(tag, 'bio'):
            self.bio = ['\n\n.{author}\n****\n'] + self.trim(self.convert_children(tag)) + ['\n****\n']
            return []
        elif self.has_class(tag, 'quote'):
            # Tricky. We want formatted up to a line
            # starting '-', and then the rest without formatting
            # which we pray will be - <author>, <source>.
            quote = self.trim(self.convert_children(tag))
            for i in range(0, len(quote)):
                if quote[i].strip().startswith('~ '):
                    quote = quote[0:i]
                    break
            by = tag.get_text().rsplit('~ ', 1)[1].replace('\n', '')
            return ['\n[quote,{by}]\n____\n'.format(by=by)] + quote + ['\n____\n']
        else:
            return ['\n'] + self.convert_children(tag) + ['\n']

    def code(self, tag):
        return ['`'] + self.convert_children(tag) + ['`']

    def em(self, tag):
        return ['_'] + self.convert_children(tag) + ['_']

    def strong(self, tag):
        return ['*'] + self.convert_children(tag) + ['*']

    def span(self, tag):
        if self.has_class(tag, 'author'):
            self.author = ''.join(self.convert_children(tag))
            return []
        else:
            return ['*'] + self.convert_children(tag) + ['*']

    def h1(self, tag):
        if not self.title:
            self.title = ''.join(self.convert_children(tag))
            return []
        else:
            return ['\n= '] + self.convert_children(tag) + ['\n']

    def h2(self, tag):
        return ['\n== '] + self.convert_children(tag) + ['\n']

    def pre(self, tag):
        return ['\n[source]\n----\n'] + self.trim(self.convert_children(tag, False), False) + ['\n----\n']

    def br(self, tag):
        return self.convert_children(tag) + [' +\n']

    def ul(self, tag):
        self.list_item.append('*' * self.ul_level)
        self.ul_level += 1
        res = self.convert_children(tag)
        self.ul_level -= 1
        self.list_item.pop()
        return res

    def ol(self, tag):
        self.list_item.append('.' * self.ol_level)
        self.ol_level += 1
        res = self.convert_children(tag)
        self.ol_level -= 1
        self.list_item.pop()
        return res

    def li(self, tag):
        return ['\n{} '.format(self.list_item[-1])] + self.convert_children(tag)

    def output(self, f, body):
        if self.title:
            print('= {}'.format(self.title), file=f)
        if self.author:
            print(':author: {}'.format(self.author), file=f)

        for o in body:
            print(o, file=f, end='')
        if self.bio:
            for o in self.bio:
                print(o, file=f, end='')

class HtmlOutput(BaseOutput):
    pass

def convert_file(f, input, output):
    soup = bs4.BeautifulSoup(f, input)
    body = output.convert(soup)
    output.output(sys.stdout, body)

def main():
    parser = argparse.ArgumentParser(description='convert ACCU XML/HTML.')
    parser.add_argument('--input-format', dest='input_format', action='store',
                        choices=['html', 'xml'], default='xml',
                        help='input format - html or xml', metavar='FORMAT')
    parser.add_argument('--output-format', dest='output_format', action='store',
                        choices=['html', 'adoc'], default='adoc',
                        help='output format - adoc or html', metavar='FORMAT')
    parser.add_argument('input', type=argparse.FileType('r'),
                        help='input XML or HTML file',
                        metavar='XML/HTML file')
    args = parser.parse_args()

    parsers = {
        "xml": "lxml-xml",
        "html": "lxml"
        }
    outputs = {
        "adoc": AdocOutput(),
        "html": HtmlOutput()
    }

    convert_file(args.input, parsers[args.input_format], outputs[args.output_format])


if __name__ == "__main__":
    main()

# Local Variables:
# mode: Python
# End:
