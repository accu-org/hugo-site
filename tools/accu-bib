#!/usr/bin/python3
#
# accu-bib <bib file>
#
# Read journal bib files.

import argparse
import os.path
import pathlib
import sys

import jinja2

import accuwebsite

def fixup_article(article):
    url = pathlib.Path(article['URL'])
    if url.name.isdigit():
        article['linkURL'] = accuwebsite.link_path(url.name)
    article['URL'] = accuwebsite.article_path(article['Journal'], article['Year'], article['Month'], article['Title'])

def main():
    parser = argparse.ArgumentParser(description='read ACCU bib file')
    parser.add_argument('bibfile')
    parser.add_argument('-t', '--template', dest='template',
                        action='store', required=True,
                        help='output template', metavar='TEMPLATE')
    parser.add_argument('-s', '--sort',
                        dest='sort', action='store',
                        choices=['author', 'title'],
                        default=None,
                        help='sort order, specify \'author\' or \'title\'',
                        metavar='SORT')
    parser.add_argument('--sort-reverse', dest='sortreverse',
                        action='store_true', default=False,
                        help='reverse sort order')
    parser.add_argument('-N', '--number', dest='number',
                        action='store', default=None,
                        help='restrict to journal number', metavar='NUMBER')
    parser.add_argument('-V', '--volume', dest='volume',
                        action='store', default=None,
                        help='restrict to journal volume', metavar='VOLUME')
    args = parser.parse_args()
    try:
        with open(args.bibfile, 'r', encoding='utf-8') as f:
            articles = accuwebsite.readbib(f, args.volume, args.number)
    except UnicodeDecodeError:
        with open(args.bibfile, 'r', encoding='cp1252') as f:
            articles = accuwebsite.readbib(f)

    # Capture our current directory
    THIS_DIR = os.path.dirname(os.path.abspath(__file__))

    for art in articles:
        fixup_article(art)

    if args.sort:
        if args.sort == 'author':
            sortfunc = lambda a: a[args.sort][0]
        else:
            sortfunc = lambda a: a[args.sort]
        articles.sort(key=sortfunc, reverse=args.sortreverse)

    j2 = jinja2.Environment(loader=jinja2.FileSystemLoader(THIS_DIR),
                            trim_blocks=True, lstrip_blocks=True)
    print(j2.get_template(args.template).render(articles=articles));
    sys.exit(0)

if __name__ == "__main__":
    main()

# Local Variables:
# mode: Python
# End:
